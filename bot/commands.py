"""
–ú–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—ã
"""
from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
import bot.keyboards as keys
from bot.logic import prepare_questions
from database.queries import Queries
from bot.states import AddWordStates, DeleteWord, WordGame
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
import random

router = Router()


@router.message(CommandStart())
async def cmd_start(massage: Message):
    user_id = massage.from_user.id
    first_name = massage.from_user.first_name
    last_name = massage.from_user.last_name
    Queries.add_user(user_id, first_name, last_name)
    await massage.answer(f"–ü—Ä–∏–≤–µ—Ç *{first_name}* üëã –î–∞–≤–∞–π –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–µ–º—Å—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ\\. "
                         f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–∂–µ—à—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —Å–µ–±—è —Ç–µ–º–ø–µ\\."
                         f"–£ —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä, –∫–∞–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä\\, "
                         f"–∏ —Å–æ–±–∏—Ä–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –±–∞–∑—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è\\. "
                         f"–î–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø—Ä–æ–ª—å–∑—É–π—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏\\:\\!",
                         reply_markup=keys.start_inline_keys,
                         parse_mode=ParseMode.MARKDOWN_V2,
                         disable_notification=True)


@router.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer("–¢—É—Ç help", disable_notification=True)


@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ üìñ")
@router.message(Command("add", prefix='!'))
async def cmd_add_word(message: Message, state: FSMContext):
    await state.set_state(AddWordStates.ru)
    await message.answer("–ù–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º", disable_notification=True)


@router.message(F.text == "–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ ‚ùå")
async def cmd_delete_word(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(DeleteWord.asked)
    await message.answer("–ù–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å", disable_notification=True)


@router.message(DeleteWord.asked)
async def cmd_answer(message: Message, state: FSMContext):
    user_id = message.from_user.id
    word = message.text
    result = Queries.delete_word(user_id, word)
    await state.clear()
    if result == 1:
        await message.answer(f"–°–ª–æ–≤–æ {word} —É–¥–∞–ª–µ–Ω–æ –∏–∑ –≤–∞—à–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è",
                             reply_markup=keys.start_inline_keys,
                             disable_notification=True)
    else:
        await message.answer(f"–°–ª–æ–≤–∞ {word} –Ω–µ—Ç –≤ –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ, —É–¥–∞–ª–∏—Ç—å –æ–±—â–∏–µ —Å–ª–æ–≤–∞ –Ω–µ–ª—å–∑—è",
                             reply_markup=keys.start_inline_keys,
                             disable_notification=True)


@router.message(AddWordStates.ru)
async def cmd_add_word_ru(message: Message, state: FSMContext):
    user_id = message.from_user.id
    await state.update_data(user_id=user_id, ru=message.text)
    await state.set_state(AddWordStates.en)
    await message.answer("–ù–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º", disable_notification=True)


@router.message(AddWordStates.en)
async def cmd_add_word_en(message: Message, state: FSMContext):
    await state.update_data(en=message.text)
    data = await state.get_data()
    Queries.add_word(ru=data.get("ru"), en=data.get("en"), user=data.get("user_id"))
    await message.answer(f"–°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ üá∑üá∫{data.get('ru')} - üá∫üá∏{data.get('en')}",
                         reply_markup=keys.start_inline_keys,
                         disable_notification=True)
    await state.clear()


@router.message(F.text == "–î–∞–≤–∞–π –µ—â–µ!")
@router.message(F.text == "–î–∞–≤–∞–π –¥—Ä—É–≥–æ–µ üîÑ")
@router.callback_query(F.data == "start_learn")
async def cmd_start_learn(callback: CallbackQuery | Message, state: FSMContext):
    user_id = callback.from_user.id

    await state.set_state(WordGame.asked)
    question = prepare_questions(Queries.get_word_variants(user_id))
    target = random.choice(list(question.keys()))
    await state.set_data({"q": question, "t": target})
    await callback.answer("–î—É–º–∞—é...", disable_notification=True)
    if isinstance(callback, CallbackQuery):
        Queries.add_lesson(user_id)
        await callback.message.answer(f"–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ: {target} ",
                                      reply_markup=await keys.word_variants_builder(
                                          question.values()), disable_notification=True)
    else:
        await callback.answer(f"–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ: {target} ",
                              reply_markup=await keys.word_variants_builder(
                                  question.values()), disable_notification=True)


@router.message(WordGame.asked)
async def cmd_answer(message: Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    question = data.get("q")
    target = data.get("t")
    answer = question.get(target)

    if message.text == answer:
        await message.answer(f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ\\! –°–ª–æ–≤–æ *{answer}* –æ–∑–Ω–∞—á–∞–µ—Ç *{target}*",
                             parse_mode=ParseMode.MARKDOWN_V2, reply_markup=await keys.true_answer_keys(),
                             disable_notification=True)
        Queries.add_right(user_id)
        await state.clear()
    else:
        for word, translate in question.items():
            if translate == message.text:
                question[word] = "‚õîÔ∏è " + translate
        await message.answer(f"–ü–æ–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
                             parse_mode=ParseMode.MARKDOWN_V2,
                             reply_markup=await keys.word_variants_builder(question.values()),
                             disable_notification=True)
        Queries.add_wrong(user_id)


@router.callback_query(F.data == "show_statistic")
async def cmd_show_status(callback: CallbackQuery | Message):
    await callback.message.answer(text="–ú–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å", reply_markup=keys.statistic_inline_keys,
                                  disable_notification=True)


@router.message(F.text == "–ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è")
@router.callback_query(F.data == "show_stat")
async def cmd_show_stat(callback: CallbackQuery | Message):
    user_id = callback.from_user.id
    stat = Queries.show_stat(user_id)
    if isinstance(callback, CallbackQuery):
        await callback.message.answer(text=f"–í—Å–µ–≥–æ —É—Ä–æ–∫–æ–≤ –Ω–∞—á–∞—Ç–æ: {stat.total_lessons}\n"
                                           f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {stat.right_answer}\n"
                                           f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {stat.wrong_answer}",
                                      reply_markup=keys.start_inline_keys,
                                      disable_notification=True)
    else:
        await callback.answer(text=f"–í—Å–µ–≥–æ —É—Ä–æ–∫–æ–≤ –Ω–∞—á–∞—Ç–æ: {stat.total_lessons}\n"
                                   f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {stat.right_answer}\n"
                                   f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {stat.wrong_answer}",
                              reply_markup=keys.start_inline_keys,
                              disable_notification=True)


@router.callback_query(F.data == "show_vocabulary")
async def cmd_show_vocabulary(callback: CallbackQuery):
    user_id = callback.from_user.id
    vocabulary = Queries.show_vocabulary(user_id)
    if vocabulary:
        await callback.message.answer(text="\n".join(vocabulary), reply_markup=keys.start_inline_keys,
                                      disable_notification=True)
    else:
        await callback.message.answer(text="–í–∞—à –ª–∏—á–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –ø–æ–∫–∞ –ø—É—Å—Ç", reply_markup=keys.start_inline_keys,
                                      disable_notification=True)
