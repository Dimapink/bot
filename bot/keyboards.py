from aiogram.types import (ReplyKeyboardMarkup, KeyboardButton,
                           InlineKeyboardMarkup, InlineKeyboardButton)
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from typing import Dict

main_keys = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="–î–∞–≤–∞–π –¥—Ä—É–≥–æ–µ üîÑ"), KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ üìñ")],
    [KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ ‚ùå")]],
    resize_keyboard=True, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç", is_persistent=True)

start_inline_keys = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å —É—á–∏—Ç—å—Å—è", callback_data="start_learn")],
    [InlineKeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_statistic")]
])

statistic_inline_keys = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–ú–æ–π —Å–ª–æ–≤–∞—Ä—å", callback_data="show_vocabulary")],
    [InlineKeyboardButton(text="–ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è", callback_data="show_stat")]
])

answer_keys = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="–ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è")], [KeyboardButton(text="–î–∞–≤–∞–π –µ—â–µ!")]],
    resize_keyboard=True, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç", is_persistent=True)


async def true_answer_keys():
    payload = ReplyKeyboardBuilder()
    payload.attach(ReplyKeyboardBuilder.from_markup(markup=answer_keys))
    payload.attach(ReplyKeyboardBuilder.from_markup(markup=main_keys))
    return payload.adjust(2).as_markup()


async def word_variants_builder(words: Dict.values):
    """
    –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤–æ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    :param words: —Å–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    :return:
    """
    payload = ReplyKeyboardBuilder()
    for word in set(words):
        payload.add(KeyboardButton(text=word))
    payload.attach((ReplyKeyboardBuilder().from_markup(markup=main_keys)))
    return payload.adjust(2).as_markup()
